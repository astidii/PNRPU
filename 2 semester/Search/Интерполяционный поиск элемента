#include <iostream>
using namespace std;
 
int interpolationSearch(int* arr, int arrSize, int key);
void quickSort(int* arr, int startIndex, int endIndex);

int main() {

  system("chcp 1251 > Null");
  
  int userKey, userSize;

  cout << "Введите размер массива: "; cin >> userSize;

  int* userArr = new int[userSize];

  for (int i = 0; i < userSize; i++) {
      cout << "Введите " << i + 1 << " элемент: ";
      cin >> userArr[i];
  }
  quickSort(userArr, 0, userSize - 1);

  cout << "\nИсходный отсортрованный массив: ";
  for (int i = 0; i < userSize; i++) {
    cout << userArr[i] << " ";
  }
  cout << "\n\nВведите искомый элемент: "; cin >> userKey;
  
  int findIndex = interpolationSearch(userArr, userSize, userKey);

  if (findIndex == -1) {
    cout << "\nЭлемента " << userKey << " нет в массиве.\n";
  }
  else {
    cout << "\nЭлемент " << userKey << " находится на позиции " << findIndex << endl;
  }
  return 0;
}

int interpolationSearch(int* arr, int arrSize, int key) {

  int leftBorder = 0, rightBorder = arrSize - 1;

  while (leftBorder <= rightBorder) {

    int middle = leftBorder + (((key - arr[leftBorder]) * (rightBorder - leftBorder)) / (arr[rightBorder] - arr[leftBorder]));
    
    if (arr[middle] == key) {
      return middle + 1;
    }

    else {
      if (arr[middle] < key) {
        leftBorder = middle + 1;
      }
      else {
        rightBorder = middle - 1;
      }
    }
  }
  return -1;
}

void quickSort(int* arr, int startIndex, int endIndex) {
  if (startIndex < endIndex) {
    int leftIndex = startIndex, rightIndex = endIndex;
    int pivotElem = arr[(leftIndex + rightIndex) / 2];

    do {
      while (arr[leftIndex] < pivotElem) leftIndex++;
      while (arr[rightIndex] > pivotElem) rightIndex--;

      if (leftIndex <= rightIndex) {
        int tmp = arr[leftIndex];
        arr[leftIndex++] = arr[rightIndex];
        arr[rightIndex--] = tmp;
      }

    } while (leftIndex < rightIndex);
    quickSort(arr, startIndex, rightIndex);
    quickSort(arr, leftIndex, endIndex);
  }
  return;
}
