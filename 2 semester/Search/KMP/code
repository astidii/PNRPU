#include <iostream>
#include <string>
using namespace std;

// Функция для вычисления префикс-функции
void prefixFunction(const string& pattern, int pi[], int m) {
    int k = 0;
    pi[0] = 0;
    for (int q = 1; q < m; ++q) {
        while (k > 0 && pattern[k] != pattern[q]) {
            k = pi[k - 1];
        }
        if (pattern[k] == pattern[q]) {
            ++k;
        }
        pi[q] = k;
    }

}

// Функция для поиска подстроки в строке с использованием алгоритма КМП
void kmpSearch(const string& text, const string& pattern) {
    int n = text.length();
    int m = pattern.length();
    int* pi = new int[m]; // Префикс-функция для образа
    prefixFunction(pattern, pi, m);
    int q = 0; // Индекс в образе
    for (int i = 0; i < n; ++i) {
        while (q > 0 && pattern[q] != text[i]) {
            q = pi[q - 1];
        }
        if (pattern[q] == text[i]) {
            ++q;
        }
        if (q == m) { // Найдено совпадение
            cout << "Найдено совпадение в позиции: " << i - m + 1 << endl;
            q = pi[q - 1]; // Продолжаем поиск
        }
    }
    delete[] pi;
}

int main() {
    system("chcp 1251 > Null");
    string text = "ABABDABACDABABCABAB";
    string pattern = "ABABCABAB";
    cout << text << endl;
    cout << pattern << endl;
    kmpSearch(text, pattern);

    return 0;
}
