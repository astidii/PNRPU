#include <iostream>
#include <string>
#include <fstream>
using namespace std;

struct Node {
    string data;
    Node* next;
    Node* prev;
};

struct List {
    Node* head = nullptr;
    Node* tail = nullptr;
};


// Функция добавления в конец
void pushBack(List& list, string data) {
    Node* new_node = new Node;
    new_node->data = data;
    new_node->next = nullptr;
    new_node->prev = nullptr;

    if (list.head == nullptr) {
        list.head = new_node;
        list.tail = new_node;
    }
    else {
        list.tail->next = new_node;
        new_node->prev = list.tail;
        list.tail = new_node;
    }
}

// Функция добавления в начало
void pushFront(List& list, string data) {
    Node* new_node = new Node;
    new_node->data = data;
    new_node->next = list.head;
    new_node->prev = nullptr;

    if (list.head != nullptr) {
        list.head->prev = new_node;
    }
    list.head = new_node;
    if (list.tail == nullptr) {
        list.tail = new_node;
    }
}

// Функция удаления всех узлов с заданным значением
void del(List& list, string data) {
    Node* current_node = list.head;
    while (current_node != nullptr) {
        if (current_node->data == data) {
            if (current_node->prev != nullptr) {
                current_node->prev->next = current_node->next;
            }
            if (current_node->next != nullptr) {
                current_node->next->prev = current_node->prev;
            }
            if (current_node == list.head) {
                list.head = current_node->next;
            }
            if (current_node == list.tail) {
                list.tail = current_node->prev;
            }
            Node* temp = current_node;
            current_node = current_node->next;
            delete temp;
        }
        else {
            current_node = current_node->next;
        }
    }
}

// Функция печати списка
void print(List& list) {
    Node* current_node = list.head;
    if (current_node == nullptr) {
        cout << "No data!" << endl;
    }
    while (current_node != nullptr) {
        cout << " -| " << current_node->data << " |- ";
        current_node = current_node->next;
    }
}

// Функция печати списка с конца до начала
void printReverse(List& list) {
    Node* current_node = list.tail;
    if (current_node == nullptr) {
        cout << "No data!" << endl;
    }
    while (current_node != nullptr) {
        cout << " -| " << current_node->data << " |- ";
        current_node = current_node->prev;
    }
}

// Функция удаления списка
void clear(List& list) {
    while (list.head != nullptr) {
        Node* temp = list.head;
        list.head = list.head->next;
        delete temp;
    }
}

// Функция записи структуры в файл
void addToFile(const char* filename, List& list) {
    // Открытие файла для записи
    ofstream File(filename);
    // Запись в файл данных каждого узла
    Node* current_node = list.head;
    while (current_node != nullptr) {
        File << current_node->data << endl;
        current_node = current_node->next;
    }
    File.close();
}

// Функция восстановления структуры из файла
void recover(const char* filename, List& list) {
    // Очищаем текущий список перед восстановлением
    clear(list);
    // Открытие файла для чтения
    ifstream File(filename);
    string data;
    while (getline(File, data)) {
        pushBack(list, data);
    }
    File.close();
}

int main() {
    List list;
    int k;
    cout << "Elements num(k): ";
    cin >> k;
    cout << "---------------" << endl;
    cin.ignore();
    string line;

    // Добавление в конец
    for (int i = 0; i < k; i++) {
        cout << "Push Back element: ";
        getline(cin, line);
        pushBack(list, line);
    }
    cout << "---------------" << endl;


    // Добавление в начало
    for (int i = 0; i < k; i++) {
        cout << "Push Forward element: ";
        getline(cin, line);
        pushFront(list, line);
    }
    cout << "---------------------------------" << endl;

    // Вывод заполненного списка
    cout << "List: ";
    print(list);
    cout << endl;
    cout << "Reverce list: ";
    printReverse(list);
    cout << endl;
    cout << "---------------------------------" << endl;

    // Удаление элемента
    cout << "Delete element: ";
    getline(cin, line);
    del(list, line);
    cout << "---------------------------------" << endl;

    // Вывод обработанного списка
    cout << "List: ";
    print(list);
    cout << endl;
    cout << "---------------------------------" << endl;

    //Запись в файл
    cout << "Add data to file!" << endl;
    addToFile("file.dat", list);
    cout << "---------------------------------" << endl;

    // Очищаем память
    clear(list);
    cout << "Cleared!" << endl;
    cout << "---------------------------------" << endl;

    // Восстановление данных
    cout << "Restoring data from a file!" << endl;
    recover("file.dat", list);
    cout << "---------------------------------" << endl;
    cout << "Recovered List: ";
    print(list);
    cout << endl;
    return 0;
}
